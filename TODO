

There are a few compatibility issues when Gaphor is ran on python 2.2 and 2.3.

check Classifier.substitution, InstanceSpecification.slot.

As always, there is much to do...

- fix stock icon loading (image size versus usage in bars etc.)
- fix accelarators (HOW?)

- Activity: implement
	Add guards to ControlFlow
	FlowFinalNode (intermediate activities),
	ObjectFlow (if the arrow is connected to a ObjectNode),
	DecisionNode (/ MergeNode),

#- Class: Association end properties are shown in the tree view
- Undo/redo functionality doesn;t work as espected
#- Implement and test attribute/operation parser.
#- Convert Data model to use the parsed attributes + operations.
#- Operation is not part of namespace (assoc. should be bi-dir.)
- Stereotypes: check documentation page 581 (597 absolute).

- Make sure than, when a model is loaded and saved again, both save files do
  not differ.

- reordering of model elements doesn't work properly.

- Exporting diagrams to UML XMI, code, images (SVG/png), etc.

- Set up a plugin architecture. Since the internals of gaphor are pretty
  modular, plugins should not be that hard.

- Some nice icons.

More specific:
- Let commands determine if they are visible/sensible, instead of a
  has_capability function on the diagram item. This will be much easier with
  gtk+ 2.4.

  Classes have a makeup like this:
	+------------+
	|   <<st>>  o| stereotype: centered, icon: right justified.
	|  *class*   | class name, centered, bold
	+------------+
	|  *name*    | compartment name, centered, bold
	| + attr1    | attribute, operation or wharever
	+------------+
	| ...        |
	+------------+
- Create stereotype, so we can add them to classes.
- How to put things like multiplicity and visibility in a popup menu
- parsers for attributes, operations
- lose (not in a comment box) text
- make generator functions from load() and save()


Stereotypes
-----------
Stereotypes is quite another story. In order to create a stereotype
one should create a Profile. Within this profile a Diagram can be created.
This diagram should accept only items that are useful within a profile:
- Classes, which will function as <<metaclass>>.
- Stereotype, which wil be the defined <<stereotypes>>.
- Extensions, connecting metaclasses and stereotypes.

and of course the usual: Comment, Association, Generalization and Dependency.

Thoughts:
- Profiles are reusable and its common to share them with different models.
- Stereotypes can only be owned by Profiles, not by (normal) Packages.
- I think having associations in this one is not very useful, though.
- We have to do a lookup if a MetaClass is actually part of the model.
- a stereotype can contain an image, that can be used in stead of its name
- Profiles should be saved with the model too.

Maybe it would be nice to create Stereotypes without creating the diagrams.
Via a dialog once can select which class (Operation, Class, etc.) is
stereotyped, which extra constraints apply and/or if you inherit from an
already existing stereotype. This way it's easy to save your stereotypes
apart from the model (and possibly in the model too) so they can be reused
in other models. 

I could create a special diagram window too that can be used to create
profiles. Profiles should be added to packages within the model.

This window should contain:
1. Name of the stereotype
2. Metaclass it applies to (Class, Operation, etc.)
3. If it is a subclass of an already existing metaclass
4. Constraints
5. Description
6. The profile it belongs to.

When a stereotype is used, an instance is created of the Stereotype
(meta)class. This is not really possible for our application. Gaphor should
figure out another way to do this. Should check XMI and see how they do it
(maybe a property is enough).

It looks like the stereotypes are more a concept than something that is
implementable in an application. The point is that the stereotypes you define
(instances of Stereotype) should be instantiated in your model when you create
a stereotyped class.

There is BTW no way to connect a stereotype with a class other than an
Association.
