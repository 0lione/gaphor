As always, there is much to do...

- attributes and operations visible for classes.
- deselect doesn't work properly on all elements...
- fix Class implementation.
- add commands for attribute/operation removal.
- Add some sort of ordering in the NamespaceView.
- Items visible/hidden doesn't work properly when opening a diagram.

---
It seems like PyObject's do not live as long as GObject objects. Once a PyObject
object has no references to itself, it can be destroyed (or at least it's
dictionary can). This should have been prevented in the pygobject_dealloc()
function in the PyGTK package. For most items there is no problem, since they
are referenced by a UML modelelement. Some, such as CommentLineItem, end up
with an empty dictionary after loading.

Currently gaphor/storage.py contains a lot of debug stuff, COmmentLineItem uses
get/set_data to store its id.
---
- Diagram items should be created for lots of model elements
  (we currently have Actor, UseCase, Comment and the fancy line that connects
   a comment with another model element). Also a buch of relationships are
   already implemented (Generalization, Include, Extend, Dependency).
   Next we should focus on the Association and then some static model elements
   like classes and packages.

- Exporting diagrams to UML XMI, code, images (SVG/png), etc.

- Set up a plugin architecture. Since the internals of gaphor are pretty
  modular, plugins should not be that hard.

- Some nice icons.

- Rewrite storage stuff: load procedures should use a SAX parser, instead
  of the minidom DOM model. Loading of a model takes way to long... (saving
  is very fast, though).

More specific:
- Some logic about what classes can be connected to each other should be
  moved from the DiagramItems to the data elements.
- A more pattern driven design (using Factories, Singletons etc.). We're doing
  a pretty good job already, though...
- Add features to classes (attribute and operation).

- Create a Classifier item, which should function as superclass for Class,
  Interface, Stereotype, Datatype, etc.

  Classes have a makeup like this:
	+------------+
	|   <<st>>  o| stereotype: centered, icon: right justified.
	|  *class*   | class name, centered, bold
	+------------+
	|  *name*    | compartment name, centered, bold
	| + attr1    | attribute, operation or wharever
	+------------+
	| ...        |
	+------------+
- Create stereotype, so we can add them to classes.
- NamespaceView should not depend on only one UML.Model instance
- How to put things like multiplicity and visibility in a popup menu
- parsers for attributes, operations
- lose (not in a comment box) text
