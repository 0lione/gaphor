"""Test case that checks the working of the utils/command/gen_uml.py module."""

from utils.model.gen_uml import generate
import importlib_metadata


class PseudoFile:
    def __init__(self):
        self.data = ""

    def write(self, data):
        self.data += data

    def close(self):
        pass


def test_loading():
    dist = importlib_metadata.distribution("gaphor")
    model_file = dist.locate_file("tests/test-model.gaphor")
    outfile = PseudoFile()

    generate(model_file, outfile)

    assert outfile.data == GENERATED, f'"""{outfile.data}"""'


GENERATED = """# This file is generated by build_uml.py. DO NOT EDIT!

from typing import Any, Sequence
from gaphor.UML.properties import (
    umlproperty,
    association,
    attribute,
    enumeration,
    derived,
    derivedunion,
    redefine,
)

AssociationType = association
AttributeType = attribute
EnumerationType = enumeration
DerivedType = derived
DerivedunionType = umlproperty
RedefineType = umlproperty

class Element:
    pass


class SubClass(Element):
    name2: umlproperty["C", Sequence["C"]]
    concrete: umlproperty["D", Sequence["D"]]
    value: umlproperty[str, str]
    abstract: umlproperty["C", Sequence["C"]]
    name4: umlproperty["D", Sequence["D"]]


class C:
    attr: umlproperty[str, str]
    name1: umlproperty["SubClass", Sequence["SubClass"]]
    base: umlproperty["SubClass", Sequence["SubClass"]]


class D(C):
    subbase: umlproperty["SubClass", Sequence["SubClass"]]
    name3: umlproperty["SubClass", Sequence["SubClass"]]


# class 'ValSpec' has been stereotyped as 'SimpleAttribute'
# class 'ShouldNotShowUp' has been stereotyped as 'SimpleAttribute' too
C.attr = attribute('attr', str)
C.name1 = association('name1', SubClass, opposite='name2')
SubClass.name2 = association('name2', C, opposite='name1')
C.base = association('base', SubClass, opposite='abstract')
D.subbase = association('subbase', SubClass, opposite='concrete')
SubClass.concrete = association('concrete', D, opposite='subbase')
D.name3 = association('name3', SubClass, opposite='name4')
# 'SubClass.value' is a simple attribute
SubClass.value = attribute('value', str)
SubClass.abstract = derivedunion('abstract', C, 0, '*', SubClass.concrete)
SubClass.name4 = redefine(SubClass, 'name4', D, name2)
"""
