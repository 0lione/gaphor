comment
  This is a file with custom definitions for Gaphor's data model.

  Parts are separated by '%%' (no training spaces) on a line.
  Comment parts start with 'comment' on the line below the percentage
  symbols, 'override' is used to define a overridden variable.

  Overrides may in their turn derive from other properties, in that case
  the 'derives' keyword may be used. It's only useful to declare the
  associations (and other derived properties) an overridden value depends
  on, since attributes have been written anyway. Note that no smart things
  wrt inheritance is done.
%%
header
import gaphor.UML.uml2overrides as overrides
import gaphor.UML.umllex as umllex
%%
override Element
from gaphor.UML.element import Element
%%
override Diagram
from gaphor.UML.diagram import Diagram
%%
override Presentation
from gaphor.UML.presentation import Presentation
%%
override Presentation.subject
# Presentation.subject is directly defined in the Presentation class
%%
override Transition
# Invert order of superclasses to avoid MRO issues
class Transition(RedefinableElement, NamedElement):
    kind: att[str]
    container: association[Region]
    source: association[Vertex]
    target: association[Vertex]
    effect: association[Behavior]
    guard: association[Constraint]
    redefintionContext: association[Classifier]
    redefinedTransition: association[Transition]
%%
override MultiplicityElement.lower(MultiplicityElement.lowerValue): derived[str]
MultiplicityElement.lower = derived('lower', str, 0, 1, lambda obj: [ obj.lowerValue ], MultiplicityElement.lowerValue)
%%
override MultiplicityElement.upper(MultiplicityElement.upperValue): derived[str]
MultiplicityElement.upper = derived('upper', str, 0, 1, lambda obj: [ obj.upperValue ], MultiplicityElement.upperValue)
%%
override NamedElement.qualifiedName(NamedElement.namespace): derived[List[str]]

NamedElement.qualifiedName = derived('qualifiedName', List[str], 0, 1, lambda obj: [overrides.namedelement_qualifiedname(obj)])

%%
override Association.endType(Association.memberEnd, Property.type): derived[Type]

# References the classifiers that are used as types of the ends of the
# association.

Association.endType = derived('endType', Type, 0, '*', lambda self: [end.type for end in self.memberEnd if end])

%%
override Class.extension(Extension.metaclass): property
# See https://www.omg.org/spec/UML/2.5/PDF, section 11.8.3.6, page 219
# It defines `Extension.allInstances()`, which basically means we have to query the element factory.

# TODO: use those as soon as Extension.metaclass can be used.
#Class.extension = derived('extension', Extension, 0, '*', class_extension, Extension.metaclass)

Class.extension = property(lambda self: self.model.lselect(lambda e: e.isKindOf(Extension) and self is e.metaclass), doc=\
"""References the Extensions that specify additional properties of the
metaclass. The property is derived from the extensions whose memberEnds
are typed by the Class.""")
%%
override Extension.metaclass(Extension.ownedEnd, Association.memberEnd): property
# Don't use derived() now, it can not deal with a [0..1] property derived from a [0..*] property.
#Extension.metaclass = derived('metaclass', Class, 0, 1, Extension.ownedEnd, Association.memberEnd)
#Extension.metaclass.filter = extension_metaclass
Extension.metaclass = property(overrides.extension_metaclass, doc=overrides.extension_metaclass.__doc__)
%%
override Classifier.inheritedMember: derivedunion[NamedElement]
Classifier.inheritedMember = derivedunion('inheritedMember', NamedElement, 0, '*')
%%
override Classifier.general(Generalization.general): derived[Classifier]
Classifier.general = derived('general', Classifier, 0, '*', lambda self: [g.general for g in self.generalization])
%%
override Class.superClass: derived[Classifier]
Class.superClass = Classifier.general
%%
override Namespace.importedMember: derivedunion[PackageableElement]
Namespace.importedMember = derivedunion('importedMember', PackageableElement, 0, '*')
%%
override Property.opposite(Property.association, Association.memberEnd): derived[Property]
Property.opposite = derived('opposite', Property, 0, 1, lambda obj: [overrides.property_opposite(obj)])
%%
override Property.isComposite(Property.aggregation): derived[bool]
Property.isComposite = derived('isComposite', bool, 0, 1, lambda obj: [obj.aggregation == 'composite'])
%%
override Constraint.context: derivedunion[Namespace]
Constraint.context = derivedunion('context', Namespace, 0, 1)
%%
override Property.navigability(Property.opposite, Property.association): derived[bool]
Property.navigability = derived('navigability', bool, 0, 1, lambda obj: [overrides.property_navigability(obj)])
%%
override Operation.type: derivedunion[DataType]
Operation.type = derivedunion('type', DataType, 0, 1)
%%
override Lifeline.parse: Callable[[Lifeline, str], None]
Lifeline.parse = umllex.parse_lifeline
%%
override Lifeline.render: Callable[[Lifeline], str]
Lifeline.render = umllex.render_lifeline
%%
override Component.provided: property
Component.provided = property(overrides.component_provided, doc=overrides.component_provided.__doc__)
%%
override Component.required: property
Component.required = property(overrides.component_required, doc=overrides.component_required.__doc__)
%%
override Message.messageKind: property
Message.messageKind = property(overrides.message_messageKind, doc=overrides.message_messageKind.__doc__)
%%
override StructuredClassifier.part: property
StructuredClassifier.part = property(lambda self: tuple(a for a in self.ownedAttribute if a.isComposite), doc="""
    Properties owned by a classifier by composition.
""")
