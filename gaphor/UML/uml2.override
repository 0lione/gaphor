comment
  vim:sw=4:et

  This is a file with custom definitions for Gaphors data model.

  Parts are separated by '%%' (no training spaces) on a line.
  Comment parts start with 'comment' on the line belowe the percentage
  symbols, 'override' is used to define a overridden variable. 

%%
override Element
from element import Element
%%
override Diagram
from diagram import Diagram
%%
comment
override MultiplicityElement.lower

# TODO: Make them watch MultiplicityElement.lowerValue.value

%%
comment
override MultiplicityElement.upper

# TODO: Make them watch MultiplicityElement.upperValue.value

%%
override Classifier.inheritedMember
Classifier.inheritedMember = derivedunion('inheritedMember', 0, '*')
%%
override Classifier.general
Classifier.general = derivedunion('inheritedMember', 0, '*')
%%
override Namespace.importedMember
Namespace.importedMember = derivedunion('importedMember', 0, '*')
%%
override Property.opposite

def property_opposite(self):
    """In the case where the property is one navigable end of a binary
    association with both ends navigable, this gives the other end.

    For Gaphor the property on the other end is returned regardless the
    navigability.
    """
    #if not self.owningAssociation and len(self.association.memberEnd) == 2:
    #    other_end = self.association.memberEnd[0] is self \
    #                and self.association.memberEnd[1] \
    #                or self.association.memberEnd[0]
    #    return other_end
    if len(self.association.memberEnd) == 2:
        return self.association.memberEnd[0] is self \
               and self.association.memberEnd[1] \
               or self.association.memberEnd[0]
    return None

#Property.opposite = derivedunion('opposite', 0, 1)
Property.opposite = property(property_opposite, doc=property_opposite.__doc__)

del property_opposite
%%
override Property.isComposite
Property.isComposite = property(lambda self: self.aggregation == intern('composite'))
%%
override Constraint.context
Constraint.context = derivedunion('context', 0, 1)
%%
override Association.endType
Association.endType = derivedunion('endType', 1, '*')
%%
override Operation.type
Operation.type = derivedunion('type', 0, 1)
%%
override Property.parse
from umllex import parse_attribute
Property.parse = parse_attribute
del parse_attribute
%%
override Property.render
from umllex import render_attribute
Property.render = render_attribute
del render_attribute
%%
override Operation.parse
from umllex import parse_operation
Operation.parse = parse_operation
del parse_operation
%%
override Operation.render
from umllex import render_operation
Operation.render = render_operation
del render_operation
