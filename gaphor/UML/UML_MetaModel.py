# MetaModel definition.
# This file is generated, do not edit.

import types
from Element import *

# Enumeration types:

PDK_IN = 'pdk_in'
PDK_INOUT = 'pdk_inout'
PDK_OUT = 'pdk_out'
PDK_RETURN = 'pdk_return'
class ParameterDirectionKind(Enumeration_):
    _values = [ PDK_IN, PDK_INOUT, PDK_OUT, PDK_RETURN, ]

AK_NONE = 'ak_none'
AK_AGGREGATE = 'ak_aggregate'
AK_COMPOSITE = 'ak_composite'
class AggregationKind(Enumeration_):
    _values = [ AK_NONE, AK_AGGREGATE, AK_COMPOSITE, ]

SK_INSTANCE = 'sk_instance'
SK_CLASSIFIER = 'sk_classifier'
class ScopeKind(Enumeration_):
    _values = [ SK_INSTANCE, SK_CLASSIFIER, ]

CCK_SEQUENTIAL = 'cck_sequential'
CCK_GUARDED = 'cck_guarded'
CCK_CONCURRENT = 'cck_concurrent'
class CallConcurrencyKind(Enumeration_):
    _values = [ CCK_SEQUENTIAL, CCK_GUARDED, CCK_CONCURRENT, ]

CK_CHANGEABLE = 'ck_changeable'
CK_FROZEN = 'ck_frozen'
CK_ADDONLY = 'ck_addOnly'
class ChangeableKind(Enumeration_):
    _values = [ CK_CHANGEABLE, CK_FROZEN, CK_ADDONLY, ]

OK_UNORDERED = 'ok_unordered'
OK_ORDERED = 'ok_ordered'
class OrderingKind(Enumeration_):
    _values = [ OK_UNORDERED, OK_ORDERED, ]

PK_CHOICE = 'pk_choice'
PK_DEEPHISTORY = 'pk_deepHistory'
PK_FORK = 'pk_fork'
PK_INITIAL = 'pk_initial'
PK_JOIN = 'pk_join'
PK_JUNCTION = 'pk_junction'
PK_SHALLOWHISTORY = 'pk_shallowHistory'
class PseudostateKind(Enumeration_):
    _values = [ PK_CHOICE, PK_DEEPHISTORY, PK_FORK, PK_INITIAL, PK_JOIN, PK_JUNCTION, PK_SHALLOWHISTORY, ]

VK_PUBLIC = 'vk_public'
VK_PROTECTED = 'vk_protected'
VK_PRIVATE = 'vk_private'
VK_PACKAGE = 'vk_package'
class VisibilityKind(Enumeration_):
    _values = [ VK_PUBLIC, VK_PROTECTED, VK_PRIVATE, VK_PACKAGE, ]

# Class definitions:
class ModelElement(Element): _attrdef = { }
class GeneralizableElement(ModelElement): _attrdef = { }
class Relationship(ModelElement): _attrdef = { }
class Association(GeneralizableElement, Relationship): _attrdef = { }
class AssociationRole(Association): _attrdef = { }
class Partition(ModelElement): _attrdef = { }
class Instance(ModelElement): _attrdef = { }
class SubsystemInstance(Instance): _attrdef = { }
class Dependency(Relationship): _attrdef = { }
class Binding(Dependency): _attrdef = { }
class Namespace(ModelElement): _attrdef = { }
class Package(GeneralizableElement, Namespace): _attrdef = { }
class Classifier(GeneralizableElement, Namespace): _attrdef = { }
class Subsystem(Package, Classifier): _attrdef = { }
class Interaction(ModelElement): _attrdef = { }
class StateVertex(ModelElement): _attrdef = { }
class StubState(StateVertex): _attrdef = { }
class Abstraction(Dependency): _attrdef = { }
class PresentationElement(Element): _attrdef = { }
class Usage(Dependency): _attrdef = { }
class Event(ModelElement): _attrdef = { }
class CallEvent(Event): _attrdef = { }
class Feature(ModelElement): _attrdef = { }
class CollaborationInstanceSet(ModelElement): _attrdef = { }
class Class(Classifier): _attrdef = { }
class UseCase(Classifier): _attrdef = { }
class Action(ModelElement): _attrdef = { }
class ReturnAction(Action): _attrdef = { }
class StateMachine(ModelElement): _attrdef = { }
class AssociationEnd(ModelElement): _attrdef = { }
class AssociationEndRole(AssociationEnd): _attrdef = { }
class StructuralFeature(Feature): _attrdef = { }
class Attribute(StructuralFeature): _attrdef = { }
class DataType(Classifier): _attrdef = { }
class ProgrammingLanguageDataType(DataType): _attrdef = { }
class ActivityGraph(StateMachine): _attrdef = { }
class Expression(Element): _attrdef = { }
class BooleanExpression(Expression): _attrdef = { }
class Artifact(Classifier): _attrdef = { }
class TypeExpression(Expression): _attrdef = { }
class ObjectSetExpression(Expression): _attrdef = { }
class ProcedureExpression(Expression): _attrdef = { }
class Permission(Dependency): _attrdef = { }
class ActionExpression(Expression): _attrdef = { }
class ArgListsExpression(Expression): _attrdef = { }
class TimeExpression(Expression): _attrdef = { }
class CreateAction(Action): _attrdef = { }
class AttributeLink(ModelElement): _attrdef = { }
class BehavioralFeature(Feature): _attrdef = { }
class Flow(Relationship): _attrdef = { }
class ClassifierInState(Classifier): _attrdef = { }
class IterationExpression(Expression): _attrdef = { }
class Constraint(ModelElement): _attrdef = { }
class InteractionInstanceSet(ModelElement): _attrdef = { }
class State(StateVertex): _attrdef = { }
class SimpleState(State): _attrdef = { }
class ActionState(SimpleState): _attrdef = { }
class CallState(ActionState): _attrdef = { }
class DestroyAction(Action): _attrdef = { }
class Message(ModelElement): _attrdef = { }
class SignalEvent(Event): _attrdef = { }
class Model(Package): _attrdef = { }
class Guard(ModelElement): _attrdef = { }
class CompositeState(State): _attrdef = { }
class SubmachineState(CompositeState): _attrdef = { }
class Object(Instance): _attrdef = { }
class TimeEvent(Event): _attrdef = { }
class TagDefinition(ModelElement): _attrdef = { }
class TaggedValue(ModelElement): _attrdef = { }
class Comment(ModelElement): _attrdef = { }
class EnumerationLiteral(ModelElement): _attrdef = { }
class Transition(ModelElement): _attrdef = { }
class ElementImport(Element): _attrdef = { }
class Signal(Classifier): _attrdef = { }
class Exception(Signal): _attrdef = { }
class MappingExpression(Expression): _attrdef = { }
class NodeInstance(Instance): _attrdef = { }
class TemplateParameter(Element): _attrdef = { }
class LinkEnd(ModelElement): _attrdef = { }
class MultiplicityRange(Element): _attrdef = { }
class Stereotype(GeneralizableElement): _attrdef = { }
class Multiplicity(Element): _attrdef = { }
class ElementResidence(Element): _attrdef = { }
class ComponentInstance(Instance): _attrdef = { }
class TemplateArgument(Element): _attrdef = { }
class Component(Classifier): _attrdef = { }
class ClassifierRole(Classifier): _attrdef = { }
class UninterpretedAction(Action): _attrdef = { }
class Collaboration(GeneralizableElement, Namespace): _attrdef = { }
class DataValue(Instance): _attrdef = { }
class Link(ModelElement): _attrdef = { }
class LinkObject(Object, Link): _attrdef = { }
class CallAction(Action): _attrdef = { }
class SendAction(Action): _attrdef = { }
class Stimulus(ModelElement): _attrdef = { }
class TerminateAction(Action): _attrdef = { }
class Enumeration(DataType): _attrdef = { }
class Method(BehavioralFeature): _attrdef = { }
class Primitive(DataType): _attrdef = { }
class FinalState(State): _attrdef = { }
class Parameter(ModelElement): _attrdef = { }
class SubactivityState(SubmachineState): _attrdef = { }
class ChangeEvent(Event): _attrdef = { }
class Operation(BehavioralFeature): _attrdef = { }
class Node(Classifier): _attrdef = { }
class AssociationClass(Association, Class): _attrdef = { }
class SynchState(StateVertex): _attrdef = { }
class Include(Relationship): _attrdef = { }
class Extend(Relationship): _attrdef = { }
class Generalization(Relationship): _attrdef = { }
class ExtensionPoint(ModelElement): _attrdef = { }
class Reception(BehavioralFeature): _attrdef = { }
class Actor(Classifier): _attrdef = { }
class UseCaseInstance(Instance): _attrdef = { }
class Pseudostate(StateVertex): _attrdef = { }
class Interface(Classifier): _attrdef = { }
class ObjectFlowState(SimpleState): _attrdef = { }
class Argument(ModelElement): _attrdef = { }
class ActionSequence(Action): _attrdef = { }

# Attributes:
AssociationRole._attrdef['multiplicity'] = ( 1, Multiplicity )
Subsystem._attrdef['isInstantiable'] = ( 0, Boolean )
StubState._attrdef['referenceState'] = ( '', Name )
Abstraction._attrdef['mapping'] = ( None, MappingExpression )
Feature._attrdef['ownerScope'] = ( SK_INSTANCE, ScopeKind )
Class._attrdef['isActive'] = ( 0, Boolean )
AssociationEndRole._attrdef['collaborationMultiplicity'] = ( 1, Multiplicity )
Attribute._attrdef['initialValue'] = ( None, Expression )
ProgrammingLanguageDataType._attrdef['expression'] = ( None, TypeExpression )
BehavioralFeature._attrdef['isQuery'] = ( 0, Boolean )
Constraint._attrdef['body'] = ( None, BooleanExpression )
Guard._attrdef['expression'] = ( None, BooleanExpression )
TimeEvent._attrdef['when'] = ( None, TimeExpression )
TagDefinition._attrdef['tagType'] = ( '', Name )
TagDefinition._attrdef['multiplicity'] = ( 1, Multiplicity )
TaggedValue._attrdef['dataValue'] = ( '', String )
Comment._attrdef['body'] = ( '', String )
ElementImport._attrdef['isSpecification'] = ( 0, Boolean )
ElementImport._attrdef['alias'] = ( '', Name )
ElementImport._attrdef['visibility'] = ( VK_PUBLIC, VisibilityKind )
ActionState._attrdef['dynamicMultiplicity'] = ( 1, Multiplicity )
ActionState._attrdef['dynamicArguments'] = ( None, ArgListsExpression )
ActionState._attrdef['isDynamic'] = ( 0, Boolean )
AssociationEnd._attrdef['isNavigable'] = ( 0, Boolean )
AssociationEnd._attrdef['multiplicity'] = ( 1, Multiplicity )
AssociationEnd._attrdef['targetScope'] = ( SK_INSTANCE, ScopeKind )
AssociationEnd._attrdef['aggregation'] = ( AK_NONE, AggregationKind )
AssociationEnd._attrdef['ordering'] = ( OK_UNORDERED, OrderingKind )
AssociationEnd._attrdef['changeability'] = ( CK_CHANGEABLE, ChangeableKind )
MultiplicityRange._attrdef['lower'] = ( 1, Integer )
MultiplicityRange._attrdef['upper'] = ( 1, UnlimitedInteger )
Stereotype._attrdef['baseClass'] = ( '', Name )
Stereotype._attrdef['icon'] = ( None, Geometry )
StructuralFeature._attrdef['ordering'] = ( OK_UNORDERED, OrderingKind )
StructuralFeature._attrdef['changeability'] = ( CK_CHANGEABLE, ChangeableKind )
StructuralFeature._attrdef['targetScope'] = ( SK_INSTANCE, ScopeKind )
StructuralFeature._attrdef['multiplicity'] = ( 1, Multiplicity )
ElementResidence._attrdef['visibility'] = ( VK_PUBLIC, VisibilityKind )
Expression._attrdef['body'] = ( '', String )
Expression._attrdef['language'] = ( '', Name )
ModelElement._attrdef['name'] = ( '', Name )
ModelElement._attrdef['isSpecification'] = ( 0, Boolean )
ModelElement._attrdef['visibility'] = ( VK_PUBLIC, VisibilityKind )
ClassifierRole._attrdef['multiplicity'] = ( 1, Multiplicity )
Method._attrdef['body'] = ( None, ProcedureExpression )
Action._attrdef['recurrence'] = ( None, IterationExpression )
Action._attrdef['script'] = ( None, ActionExpression )
Action._attrdef['target'] = ( None, ObjectSetExpression )
Action._attrdef['isAsynchronous'] = ( 0, Boolean )
Parameter._attrdef['kind'] = ( PDK_IN, ParameterDirectionKind )
Parameter._attrdef['defaultValue'] = ( None, Expression )
SubactivityState._attrdef['dynamicMultiplicity'] = ( 1, Multiplicity )
SubactivityState._attrdef['dynamicArguments'] = ( None, ArgListsExpression )
SubactivityState._attrdef['isDynamic'] = ( 0, Boolean )
ChangeEvent._attrdef['changeExpression'] = ( None, BooleanExpression )
Operation._attrdef['concurrency'] = ( CCK_SEQUENTIAL, CallConcurrencyKind )
Operation._attrdef['isRoot'] = ( 0, Boolean )
Operation._attrdef['isLeaf'] = ( 0, Boolean )
Operation._attrdef['isAbstract'] = ( 0, Boolean )
Operation._attrdef['specification'] = ( '', String )
CompositeState._attrdef['isConcurrent'] = ( 0, Boolean )
SynchState._attrdef['bound'] = ( 1, UnlimitedInteger )
Extend._attrdef['condition'] = ( None, BooleanExpression )
Generalization._attrdef['discriminator'] = ( '', Name )
ExtensionPoint._attrdef['location'] = ( None, LocationReference )
GeneralizableElement._attrdef['isLeaf'] = ( 0, Boolean )
GeneralizableElement._attrdef['isRoot'] = ( 0, Boolean )
GeneralizableElement._attrdef['isAbstract'] = ( 0, Boolean )
Reception._attrdef['isAbstract'] = ( 0, Boolean )
Reception._attrdef['specification'] = ( '', String )
Reception._attrdef['isRoot'] = ( 0, Boolean )
Reception._attrdef['isLeaf'] = ( 0, Boolean )
Pseudostate._attrdef['kind'] = ( PK_CHOICE, PseudostateKind )
ObjectFlowState._attrdef['isSynch'] = ( 0, Boolean )
Argument._attrdef['value'] = ( None, Expression )

# Associations, ordered by pair
InteractionInstanceSet._attrdef['interaction'] = ( None, Interaction )
Interaction._attrdef['interactionInstanceSet'] = ( Sequence, InteractionInstanceSet, 'interaction' )
ModelElement._attrdef['elementResidence'] = ( Sequence, ElementResidence, 'resident' )
ElementResidence._attrdef['resident'] = ( None, ModelElement )
Message._attrdef['predecessor'] = ( Sequence, Message )
Message._attrdef['successor'] = ( Sequence, Message, 'predecessor' )
State._attrdef['exit'] = ( None, Action )
Action._attrdef['state'] = ( None, State, 'exit' )
Instance._attrdef['classifier'] = ( Sequence, Classifier )
Classifier._attrdef['instance'] = ( Sequence, Instance, 'classifier' )
CreateAction._attrdef['instantiation'] = ( None, Classifier )
Classifier._attrdef['createAction'] = ( Sequence, CreateAction, 'instantiation' )
Argument._attrdef['action'] = ( None, Action, 'actualArgument' )
Action._attrdef['actualArgument'] = ( Sequence, Argument, 'action' )
AttributeLink._attrdef['attribute'] = ( None, Attribute )
Attribute._attrdef['attributeLink'] = ( Sequence, AttributeLink, 'attribute' )
AssociationRole._attrdef['message'] = ( Sequence, Message, 'communicationConnection' )
Message._attrdef['communicationConnection'] = ( None, AssociationRole, 'message' )
Instance._attrdef['attributeLink'] = ( Sequence, AttributeLink, 'value' )
AttributeLink._attrdef['value'] = ( None, Instance )
Attribute._attrdef['associationEndRole'] = ( Sequence, AssociationEndRole, 'availableQualifier' )
AssociationEndRole._attrdef['availableQualifier'] = ( Sequence, Attribute )
Instance._attrdef['owner'] = ( None, Instance, 'ownedInstance' )
Instance._attrdef['ownedInstance'] = ( Sequence, Instance )
Action._attrdef['state'] = ( None, State, 'entry' )
State._attrdef['entry'] = ( None, Action )
State._attrdef['doActivity'] = ( None, Action )
Action._attrdef['state'] = ( None, State, 'doActivity' )
StateVertex._attrdef['outgoing'] = ( Sequence, Transition, 'source' )
Transition._attrdef['source'] = ( None, StateVertex, 'outgoing' )
Transition._attrdef['target'] = ( None, StateVertex, 'incoming' )
StateVertex._attrdef['incoming'] = ( Sequence, Transition, 'target' )
ExtensionPoint._attrdef['extend'] = ( Sequence, Extend, 'extensionPoint' )
Extend._attrdef['extensionPoint'] = ( Sequence, ExtensionPoint )
Collaboration._attrdef['interaction'] = ( Sequence, Interaction, 'context' )
Interaction._attrdef['context'] = ( None, Collaboration, 'interaction' )
Component._attrdef['residentElement'] = ( Sequence, ElementResidence, 'container' )
ElementResidence._attrdef['container'] = ( None, Component, 'residentElement' )
ModelElement._attrdef['templateParameter'] = ( Sequence, TemplateParameter, 'template' )
TemplateParameter._attrdef['template'] = ( None, ModelElement, 'templateParameter' )
Binding._attrdef['argument'] = ( Sequence, TemplateArgument, 'binding' )
TemplateArgument._attrdef['binding'] = ( None, Binding, 'argument' )
ModelElement._attrdef['sourceFlow'] = ( Sequence, Flow, 'source' )
Flow._attrdef['source'] = ( Sequence, ModelElement, 'sourceFlow' )
TemplateParameter._attrdef['defaultElement'] = ( None, ModelElement )
ModelElement._attrdef['defaultedParameter'] = ( Sequence, TemplateParameter, 'defaultElement' )
AttributeLink._attrdef['linkEnd'] = ( None, LinkEnd, 'qualifiedValue' )
LinkEnd._attrdef['qualifiedValue'] = ( Sequence, AttributeLink, 'linkEnd' )
Generalization._attrdef['powertype'] = ( None, Classifier, 'powertypeRange' )
Classifier._attrdef['powertypeRange'] = ( Sequence, Generalization, 'powertype' )
Comment._attrdef['annotatedElement'] = ( Sequence, ModelElement, 'comment' )
ModelElement._attrdef['comment'] = ( Sequence, Comment, 'annotatedElement' )
TemplateArgument._attrdef['modelElement'] = ( None, ModelElement )
ModelElement._attrdef['templateArgument'] = ( Sequence, TemplateArgument, 'modelElement' )
ClassifierRole._attrdef['base'] = ( Sequence, Classifier )
Classifier._attrdef['classifierRole'] = ( Sequence, ClassifierRole, 'base' )
Artifact._attrdef['implementationLocation'] = ( Sequence, Component, 'implementation' )
Component._attrdef['implementation'] = ( Sequence, Artifact )
ModelElement._attrdef['referenceTag'] = ( Sequence, TaggedValue, 'referenceValue' )
TaggedValue._attrdef['referenceValue'] = ( Sequence, ModelElement )
ClassifierInState._attrdef['inState'] = ( Sequence, State )
State._attrdef['classifierInState'] = ( Sequence, ClassifierInState, 'inState' )
StateMachine._attrdef['context'] = ( None, ModelElement )
ModelElement._attrdef['behavior'] = ( Sequence, StateMachine, 'context' )
StateMachine._attrdef['top'] = ( None, State, 'stateMachine' )
State._attrdef['stateMachine'] = ( None, StateMachine, 'top' )
Parameter._attrdef['event'] = ( None, Event, 'parameter' )
Event._attrdef['parameter'] = ( Sequence, Parameter )
SignalEvent._attrdef['signal'] = ( None, Signal )
Signal._attrdef['occurrence'] = ( Sequence, SignalEvent, 'signal' )
Transition._attrdef['guard'] = ( None, Guard, 'transition' )
Guard._attrdef['transition'] = ( None, Transition, 'guard' )
Include._attrdef['addition'] = ( None, UseCase )
UseCase._attrdef['includer'] = ( Sequence, Include, 'addition' )
Classifier._attrdef['objectFlowState'] = ( Sequence, ObjectFlowState, 'type' )
ObjectFlowState._attrdef['type'] = ( None, Classifier )
Event._attrdef['state'] = ( Sequence, State, 'deferrableEvent' )
State._attrdef['deferrableEvent'] = ( Sequence, Event )
Transition._attrdef['stateMachine'] = ( None, StateMachine, 'transitions' )
StateMachine._attrdef['transitions'] = ( Sequence, Transition, 'stateMachine' )
ModelElement._attrdef['supplierDependency'] = ( Sequence, Dependency, 'supplier' )
Dependency._attrdef['supplier'] = ( Sequence, ModelElement )
CollaborationInstanceSet._attrdef['interactionInstanceSet'] = ( Sequence, InteractionInstanceSet, 'context' )
InteractionInstanceSet._attrdef['context'] = ( None, CollaborationInstanceSet, 'interactionInstanceSet' )
ModelElement._attrdef['presentation'] = ( Sequence, PresentationElement, 'subject' )
PresentationElement._attrdef['subject'] = ( Sequence, ModelElement )
AssociationEnd._attrdef['specification'] = ( Sequence, Classifier )
Classifier._attrdef['specifiedEnd'] = ( Sequence, AssociationEnd, 'specification' )
Constraint._attrdef['constrainedElement'] = ( Sequence, ModelElement, 'constraint' )
ModelElement._attrdef['constraint'] = ( Sequence, Constraint, 'constrainedElement' )
Dependency._attrdef['client'] = ( Sequence, ModelElement, 'clientDependency' )
ModelElement._attrdef['clientDependency'] = ( Sequence, Dependency, 'client' )
Message._attrdef['conformingStimulus'] = ( Sequence, Stimulus )
Stimulus._attrdef['playedRole'] = ( Sequence, Message, 'conformingStimulus' )
CallEvent._attrdef['operation'] = ( None, Operation )
Operation._attrdef['occurrence'] = ( Sequence, CallEvent, 'operation' )
Action._attrdef['transition'] = ( None, Transition, 'effect' )
Transition._attrdef['effect'] = ( None, Action )
CompositeState._attrdef['subvertex'] = ( Sequence, StateVertex, 'container' )
StateVertex._attrdef['container'] = ( None, CompositeState, 'subvertex' )
State._attrdef['internalTransition'] = ( Sequence, Transition )
Transition._attrdef['state'] = ( None, State, 'internalTransition' )
Node._attrdef['deployedComponent'] = ( Sequence, Component, 'deploymentLocation' )
Component._attrdef['deploymentLocation'] = ( Sequence, Node, 'deployedComponent' )
Event._attrdef['transition'] = ( Sequence, Transition, 'trigger' )
Transition._attrdef['trigger'] = ( None, Event )
Collaboration._attrdef['representedOperation'] = ( None, Operation )
Operation._attrdef['collaboration'] = ( Sequence, Collaboration, 'representedOperation' )
Stimulus._attrdef['communicationLink'] = ( None, Link )
Link._attrdef['stimulus'] = ( Sequence, Stimulus, 'communicationLink' )
Action._attrdef['stimulus'] = ( Sequence, Stimulus, 'dispatchAction' )
Stimulus._attrdef['dispatchAction'] = ( None, Action )
ActionSequence._attrdef['action'] = ( Sequence, Action, 'actionSequence' )
Action._attrdef['actionSequence'] = ( None, ActionSequence, 'action' )
ComponentInstance._attrdef['nodeInstance'] = ( None, NodeInstance, 'resident' )
NodeInstance._attrdef['resident'] = ( Sequence, ComponentInstance, 'nodeInstance' )
Instance._attrdef['componentInstance'] = ( None, ComponentInstance, 'resident' )
ComponentInstance._attrdef['resident'] = ( Sequence, Instance, 'componentInstance' )
Stimulus._attrdef['receiver'] = ( None, Instance )
Instance._attrdef['stimulus'] = ( Sequence, Stimulus, 'receiver' )
ActivityGraph._attrdef['partition'] = ( Sequence, Partition, 'activityGraph' )
Partition._attrdef['activityGraph'] = ( None, ActivityGraph, 'partition' )
Signal._attrdef['sendAction'] = ( Sequence, SendAction, 'signal' )
SendAction._attrdef['signal'] = ( None, Signal )
ClassifierRole._attrdef['message'] = ( Sequence, Message, 'receiver' )
Message._attrdef['receiver'] = ( None, ClassifierRole )
Message._attrdef['action'] = ( None, Action )
Action._attrdef['message'] = ( Sequence, Message, 'action' )
ElementImport._attrdef['importedElement'] = ( None, ModelElement )
ModelElement._attrdef['elementImport'] = ( Sequence, ElementImport, 'importedElement' )
ClassifierRole._attrdef['availableContents'] = ( Sequence, ModelElement )
ModelElement._attrdef['classifierRole'] = ( Sequence, ClassifierRole, 'availableContents' )
MultiplicityRange._attrdef['multiplicity'] = ( None, Multiplicity, 'range' )
Multiplicity._attrdef['range'] = ( Sequence, MultiplicityRange, 'multiplicity' )
Package._attrdef['elementImport'] = ( Sequence, ElementImport, 'package' )
ElementImport._attrdef['package'] = ( None, Package, 'elementImport' )
ModelElement._attrdef['collaboration'] = ( Sequence, Collaboration, 'constrainingElement' )
Collaboration._attrdef['constrainingElement'] = ( Sequence, ModelElement )
ObjectFlowState._attrdef['parameter'] = ( Sequence, Parameter )
Parameter._attrdef['state'] = ( Sequence, ObjectFlowState, 'parameter' )
CollaborationInstanceSet._attrdef['participatingInstance'] = ( Sequence, Instance )
Instance._attrdef['collaborationInstanceSet'] = ( Sequence, CollaborationInstanceSet, 'participatingInstance' )
Collaboration._attrdef['collaborationInstanceSet'] = ( Sequence, CollaborationInstanceSet, 'collaboration' )
CollaborationInstanceSet._attrdef['collaboration'] = ( None, Collaboration )
Instance._attrdef['playedRole'] = ( Sequence, ClassifierRole, 'conformingInstance' )
ClassifierRole._attrdef['conformingInstance'] = ( Sequence, Instance )
Link._attrdef['playedRole'] = ( Sequence, AssociationRole, 'conformingLink' )
AssociationRole._attrdef['conformingLink'] = ( Sequence, Link )
UseCase._attrdef['extender'] = ( Sequence, Extend, 'base' )
Extend._attrdef['base'] = ( None, UseCase )
Stimulus._attrdef['sender'] = ( None, Instance )
Instance._attrdef['stimulus'] = ( Sequence, Stimulus, 'sender' )
AssociationEnd._attrdef['linkEnd'] = ( Sequence, LinkEnd, 'associationEnd' )
LinkEnd._attrdef['associationEnd'] = ( None, AssociationEnd )
LinkEnd._attrdef['link'] = ( None, Link, 'connection' )
Link._attrdef['connection'] = ( Sequence, LinkEnd, 'link' )
Association._attrdef['link'] = ( Sequence, Link, 'association' )
Link._attrdef['association'] = ( None, Association )
StateMachine._attrdef['submachineState'] = ( Sequence, SubmachineState, 'submachine' )
SubmachineState._attrdef['submachine'] = ( None, StateMachine, 'submachineState' )
Extend._attrdef['extension'] = ( None, UseCase, 'extend' )
UseCase._attrdef['extend'] = ( Sequence, Extend, 'extension' )
Operation._attrdef['callAction'] = ( Sequence, CallAction, 'operation' )
CallAction._attrdef['operation'] = ( None, Operation )
Classifier._attrdef['association'] = ( Sequence, AssociationEnd, 'participant' )
AssociationEnd._attrdef['participant'] = ( None, Classifier )
StructuralFeature._attrdef['type'] = ( None, Classifier )
Classifier._attrdef['typedFeature'] = ( Sequence, StructuralFeature, 'type' )
Namespace._attrdef['ownedElement'] = ( Sequence, ModelElement, 'namespace' )
ModelElement._attrdef['namespace'] = ( None, Namespace, 'ownedElement' )
BehavioralFeature._attrdef['parameter'] = ( Sequence, Parameter, 'behavioralFeature' )
Parameter._attrdef['behavioralFeature'] = ( None, BehavioralFeature, 'parameter' )
Parameter._attrdef['type'] = ( None, Classifier )
Classifier._attrdef['typedParameter'] = ( Sequence, Parameter, 'type' )
Stimulus._attrdef['interactionInstanceSet'] = ( Sequence, InteractionInstanceSet, 'participatingStimulus' )
InteractionInstanceSet._attrdef['participatingStimulus'] = ( Sequence, Stimulus )
Generalization._attrdef['child'] = ( None, GeneralizableElement, 'generalization' )
GeneralizableElement._attrdef['generalization'] = ( Sequence, Generalization, 'child' )
GeneralizableElement._attrdef['specialization'] = ( Sequence, Generalization, 'parent' )
Generalization._attrdef['parent'] = ( None, GeneralizableElement )
AssociationEnd._attrdef['qualifier'] = ( Sequence, Attribute, 'associationEnd' )
Attribute._attrdef['associationEnd'] = ( None, AssociationEnd, 'qualifier' )
Message._attrdef['interaction'] = ( None, Interaction, 'message' )
Interaction._attrdef['message'] = ( Sequence, Message, 'interaction' )
TagDefinition._attrdef['owner'] = ( None, Stereotype, 'definedTag' )
Stereotype._attrdef['definedTag'] = ( Sequence, TagDefinition, 'owner' )
UseCase._attrdef['include'] = ( Sequence, Include, 'base' )
Include._attrdef['base'] = ( None, UseCase, 'include' )
AssociationEndRole._attrdef['base'] = ( None, AssociationEnd )
AssociationEnd._attrdef['associationEndRole'] = ( Sequence, AssociationEndRole, 'base' )
Signal._attrdef['context'] = ( Sequence, BehavioralFeature )
BehavioralFeature._attrdef['raisedSignal'] = ( Sequence, Signal )
Instance._attrdef['slot'] = ( Sequence, AttributeLink, 'instance' )
AttributeLink._attrdef['instance'] = ( None, Instance, 'slot' )
UseCase._attrdef['extensionPoint'] = ( Sequence, ExtensionPoint, 'useCase' )
ExtensionPoint._attrdef['useCase'] = ( None, UseCase, 'extensionPoint' )
Signal._attrdef['reception'] = ( Sequence, Reception, 'signal' )
Reception._attrdef['signal'] = ( None, Signal )
Message._attrdef['message'] = ( Sequence, Message, 'activator' )
Message._attrdef['activator'] = ( None, Message )
Instance._attrdef['linkEnd'] = ( Sequence, LinkEnd, 'instance' )
LinkEnd._attrdef['instance'] = ( None, Instance, 'linkEnd' )
Message._attrdef['sender'] = ( None, ClassifierRole )
ClassifierRole._attrdef['message'] = ( Sequence, Message, 'sender' )
ModelElement._attrdef['partition'] = ( Sequence, Partition, 'contents' )
Partition._attrdef['contents'] = ( Sequence, ModelElement )
Classifier._attrdef['collaboration'] = ( Sequence, Collaboration, 'representedClassifier' )
Collaboration._attrdef['representedClassifier'] = ( None, Classifier )
CollaborationInstanceSet._attrdef['constrainingElement'] = ( Sequence, ModelElement )
ModelElement._attrdef['collaborationInstanceSet'] = ( Sequence, CollaborationInstanceSet, 'constrainingElement' )
ModelElement._attrdef['targetFlow'] = ( Sequence, Flow, 'target' )
Flow._attrdef['target'] = ( Sequence, ModelElement, 'targetFlow' )
Link._attrdef['collaborationInstanceSet'] = ( Sequence, CollaborationInstanceSet, 'participatingLink' )
CollaborationInstanceSet._attrdef['participatingLink'] = ( Sequence, Link )
Association._attrdef['associationRole'] = ( Sequence, AssociationRole, 'base' )
AssociationRole._attrdef['base'] = ( None, Association )
Collaboration._attrdef['usedCollaboration'] = ( Sequence, Collaboration )
Collaboration._attrdef['collaboration'] = ( Sequence, Collaboration, 'usedCollaboration' )
TagDefinition._attrdef['typedValue'] = ( Sequence, TaggedValue, 'type' )
TaggedValue._attrdef['type'] = ( None, TagDefinition )
Stereotype._attrdef['extendedElement'] = ( Sequence, ModelElement, 'stereotype' )
ModelElement._attrdef['stereotype'] = ( Sequence, Stereotype )
Constraint._attrdef['constrainedStereotype'] = ( None, Stereotype, 'stereotypeConstraint' )
Stereotype._attrdef['stereotypeConstraint'] = ( Sequence, Constraint )
Instance._attrdef['stimulus'] = ( Sequence, Stimulus, 'argument' )
Stimulus._attrdef['argument'] = ( Sequence, Instance )
ModelElement._attrdef['parameterTemplate'] = ( None, TemplateParameter, 'parameter' )
TemplateParameter._attrdef['parameter'] = ( None, ModelElement )
Enumeration._attrdef['literal'] = ( Sequence, EnumerationLiteral, 'enumeration' )
EnumerationLiteral._attrdef['enumeration'] = ( None, Enumeration, 'literal' )
Link._attrdef['owner'] = ( None, Instance, 'ownedLink' )
Instance._attrdef['ownedLink'] = ( Sequence, Link )
Feature._attrdef['classifierRole'] = ( Sequence, ClassifierRole, 'availableFeature' )
ClassifierRole._attrdef['availableFeature'] = ( Sequence, Feature )
Classifier._attrdef['classifierInState'] = ( Sequence, ClassifierInState, 'type' )
ClassifierInState._attrdef['type'] = ( None, Classifier )
ModelElement._attrdef['taggedValue'] = ( Sequence, TaggedValue, 'modelElement' )
TaggedValue._attrdef['modelElement'] = ( None, ModelElement, 'taggedValue' )
Method._attrdef['specification'] = ( None, Operation )
Operation._attrdef['method'] = ( Sequence, Method, 'specification' )
Classifier._attrdef['feature'] = ( Sequence, Feature, 'owner' )
Feature._attrdef['owner'] = ( None, Classifier, 'feature' )
Association._attrdef['connection'] = ( Sequence, AssociationEnd, 'association' )
AssociationEnd._attrdef['association'] = ( None, Association, 'connection' )
