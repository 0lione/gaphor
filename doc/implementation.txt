Implementation issues

There are a few things that should be taken into account when writing
code for Gaphor:

The UML module contains a dictionary that holds all the elements by its
reference. The elements are weakref'ed. Calling UML.gc() removes destroyed
references from the element dictionary and forces a garbage collection.

The UML module uses the Python garbage collector to clean up unused objects.
Since the UML module contains the data the module should always try to
represent the actual data model. The Element.gc() method forces a garbage
collection and cleans up the hash table that contains weak references to
all elements in the canvas.

One should not try to keep references of diagram items (the ones created
by the diagram.Diagram.create_item() method). This is an implementation
issue with the GObject layer.

Since the DiaCanvas2 does not work with the garbage collector, all diagrams
should always be removed before freeing the data model. This is done
by the diagram.destroy_diagrams() function (this is related to GObject not
working via the garbage collector).

